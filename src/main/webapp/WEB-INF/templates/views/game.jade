- import com.github.joonasrouhiainen.joogo.model._

-@ val gameId: String
-@ val game: Game
- val board = game.board

h1 JooGo

.container
    .board
        table
            - for (y <- 1 to board.height)
                - val rowClass = "row-" + y
                tr(class={if (y == board.height) rowClass + " row-last" else rowClass})
                    - for (x <- 1 to board.width)
                        - val colClass = "col-" + x
                        td(class={if (x == board.width) colClass + " col-last" else colClass})
                            form(action={"/g/" + gameId} method="POST")
                                input(type="hidden" name="x" value={x})
                                input(type="hidden" name="y" value={y})
                                - val isHoshi    = board.hoshi.contains(new Coords(x, y))
                                - val stoneColor = board.get(x, y)
                                - val colorClass = if (stoneColor.isDefined) stoneColor.get else "empty" 
                                button(type="submit" class={colorClass})
                                    - if (isHoshi && !stoneColor.isDefined)
                                        .hoshi

p = "Move " + game.moveNumber + ". " + (if (game.isFinished) "Game over. Result: " + game.result.get + "." else board.whoseTurn + "'s turn.")
p = "Captured stones: " + board.capturesForColors

form(action="/pass" method="POST")
    button(type="submit") Pass turn

form(action="/resign" method="POST")
    button(type="submit") Resign