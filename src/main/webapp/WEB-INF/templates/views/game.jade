- import com.github.joonasrouhiainen.joogo.model._

-@ val gameId: String
-@ val game: Game
- val board = game.board
- val gameRoot = "/g/" + gameId

.container-fluid
  .row-fluid
    .span3
      .well.sidebar-nav
        .nav.nav-list
          li.nav-header = "Move " + game.moveNumber
          li
            | It is
            strong
              span#whoseTurn>= board.whoseTurn
              | 's
            | turn. (that's you!)
          li = if (game.isFinished) "Game over. Result: " + game.result.get + "."
          li.nav-header Players
          li = "Black: " + game.players(Black)
          li = "White: " + game.players(White)
          li.nav-header Captured
          li
            | Black:
            span#capturesB= board.capturesForColors(Black)
          li
            | White:
            span#capturesW= board.capturesForColors(White)
    .span9
      .board
        input#game-id(type="hidden" value={gameId})
        table
          - for (y <- 1 to board.height)
            - val rowClass = "row-" + y
            tr(class={if (y == board.height) rowClass + " row-last" else rowClass})
              - for (x <- 1 to board.width)
                - val colClass = "col-" + x
                td(class={if (x == board.width) colClass + " col-last" else colClass})
                  - val isHoshi    = board.hoshi.contains(new Coords(x, y))
                  - val stoneColor = board.get(x, y)
                  - val colorClass = if (stoneColor.isDefined) stoneColor.get else "empty" 
                  button(type="button" class={colorClass} value={x + "," + y})
                    - if (isHoshi && !stoneColor.isDefined)
                      .hoshi
  hr
  .row-fluid.actions
    .span6
      button#pass.btn.btn-large Pass turn
    .span6
      button#resign.btn.btn-large Resign